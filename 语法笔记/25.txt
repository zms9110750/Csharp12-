

Minion minion = new Minion(); 
Enemy enemy = new Minion(); //基类变量可以接收派生类作为值
minion.Attack(minion);//基类参数可以传入派生类值


abstract class Enemy(int hp)
{
	public virtual int Atk { get; protected set; }//虚方法
	public int Def { get; protected set; }
	public int Hp { get; protected set; } = hp;
	public Enemy() : this(100)
	{
	}
	public abstract void Injured(int damage);//抽象方法，没有主体
	public virtual void Attack(Enemy enemy)
	{
		enemy.Injured(Atk);
	}
}
sealed class Minion : Enemy//密封类，不允许再继承
{
	public override void Injured(int damage)//重写虚方法
	{
		Hp -= damage;
	}
}

class Boss(int shield) : Enemy(300)//主构造器需要调用基类构造器
{
	public int Anger { get; private set; }
	public int Shield { get; private set; } = shield;
	public sealed override int Atk//重写虚方法
	{
		get => base.Atk + Anger;//使用base.来访问基类的同名成员
		protected set => base.Atk = value;
	}
	public override void Injured(int damage)//重写虚方法
	{
		Shield -= damage;
		if (Shield < 0)
		{
			Hp += Shield;
			Shield = 0;
		}
	}
}