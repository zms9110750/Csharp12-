//if选择
int r1 = Random.Shared.Next(100);
if (r1 > 80)
{
	Console.WriteLine("触发暴击");
}
Console.WriteLine("随机数是" + r1);

//if-else if
int r2 = Random.Shared.Next(100);
if (r2 > 98)
{
	Console.WriteLine("评分为SS");
}
else if (r2 > 95)
{
	Console.WriteLine("评分为S");
}
else if (r2 > 90)
{
	Console.WriteLine("评分为A");
}
else if (r2 > 80)
{
	Console.WriteLine("评分为B");
}
else if (r2 > 60)
{
	Console.WriteLine("评分为C");
}
else
{
	Console.WriteLine("未通过");
}

Console.WriteLine("随机数是" + r2);
//这一串判断都是对同一个值进行，不能把变量改为`Random.Shared.Next(100)`。

//if-else
int r3 = Random.Shared.Next(100);
if (r3 > 60)
{
	Console.WriteLine("评分为C");
}
else
{
	Console.WriteLine("未通过");
}

//while循环
int r4 = Random.Shared.Next(100);
while (r4 > 4)
{
	Console.WriteLine("没有抽中SSR");
	r4 = Random.Shared.Next(100);
}
Console.WriteLine("抽中了SSR");

//do-while循环
string? s1;
do
{
	Console.WriteLine("初次启动或密码错误，请输入密码");
	s1 = Console.ReadLine();
} while (s1 == "123456");
Console.WriteLine("登录成功");

//for循环
for (int i = 0; i < 10; i++)
{
	Console.WriteLine("第" + i + "次丢骰子，丢出来" + Random.Shared.Next(1, 7));
}
#region 流程预测
if (1 < 2)
{
	Console.WriteLine("1");
}
else
{
	Console.WriteLine(2);//检测到无法访问的代码
}

while (true)//死循环
{
}
Console.WriteLine("结束");//检测到无法访问的代码

//它经过的流程控制语句不能保证它有初始值，那么你是无法使用他的。

int i5 = 0;
int i6;
if (i5 < 10)
{
	i6 = 10;
}
Console.WriteLine(i6);//尽管你认为一定会赋值初始值，但编译器不觉得。

//如果你通过if-else，或者带有常量的条件（死循环），那么可以保证它在使用前必定赋值。

int i7 = 0;
int i8;
if (i7 < 10)
{
	i8 = 10;
}
else
{
	i8 = 20;
}
Console.WriteLine(i8);
#endregion

//常量
const double Pi = 3.1415926;