
//foreach循环
using System.Collections;

foreach (var item in "hello")
{
	Console.WriteLine(item);
}
var count = "hello".Select(s => (int)s).Count(s => s > 20);
Console.WriteLine(count); 

class CanEnumer : IEnumerable<int>
{
	public IEnumerator<int> GetEnumerator()
	{
		for (int i = 0; i < 10; i++)
		{
			var r = Random.Shared.Next(10);
			if (r < i)
			{
				yield break;
			}
			else
			{
				yield return r;
			}
		}
	}

	IEnumerator IEnumerable.GetEnumerator() => throw new NotImplementedException();
}





#region 自定义迭代器

class MyEnumerable
{
	//一个用来被遍历的东西
	public readonly int[] Arr;
	public MyEnumerable(int length)
	{
		Arr = new int[length];
	}

	//获取迭代器
	public MyEnumerator GetEnumerator()
	{
		return new MyEnumerator(this);
	}

	//因为这个迭代器只能用在自己类型身上，所以作为内部类
	public struct MyEnumerator
	{
		//自备索引
		private int index = -1;

		//返回当前索引的引用变量
		public readonly ref int Current => ref enumerable.Arr[index];

		//判断是否还能有下一个值
		public bool MoveNext()
		{
			return ++index < enumerable.Arr.Length;
		}

		//储存需要迭代的东西
		private readonly MyEnumerable enumerable;
		public MyEnumerator(MyEnumerable enumerable)
		{
			ArgumentNullException.ThrowIfNull(enumerable);
			this.enumerable = enumerable;
		}
	}
}

#endregion